# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateAppointment {
  _count: AppointmentCountAggregate
  _max: AppointmentMaxAggregate
  _min: AppointmentMinAggregate
}

type AggregateProcedure {
  _count: ProcedureCountAggregate
  _max: ProcedureMaxAggregate
  _min: ProcedureMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Appointment {
  _count: AppointmentCount
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customer: User!
  customerId: String!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!

  """id do appointment"""
  id: String!
  proceduresIds(cursor: ProcedureWhereUniqueInput, distinct: [ProcedureScalarFieldEnum!], orderBy: [ProcedureOrderByWithRelationInput!], skip: Int, take: Int, where: ProcedureWhereInput): [Procedure!]!
  startsAt: DateTime!
  supervisor: User!
  supervisorId: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type AppointmentCount {
  proceduresIds: Int!
}

type AppointmentCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  createdByName: Int!
  customerId: Int!
  deletedAt: Int!
  deletedBy: Int!
  deletedByName: Int!
  endsAt: Int!
  id: Int!
  startsAt: Int!
  supervisorId: Int!
  updatedAt: Int!
  updatedBy: Int!
  updatedByName: Int!
}

input AppointmentCountOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  customerId: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  endsAt: SortOrder
  id: SortOrder
  startsAt: SortOrder
  supervisorId: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input AppointmentCreateInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customer: UserCreateNestedOneWithoutAppointmentsInput!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  proceduresIds: ProcedureCreateNestedManyWithoutAppointmentsInput
  startsAt: DateTime!
  supervisor: UserCreateNestedOneWithoutSupervisedAppointmentsInput!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentCreateManyCustomerInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  startsAt: DateTime!
  supervisorId: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentCreateManyCustomerInputEnvelope {
  data: [AppointmentCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input AppointmentCreateManyInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customerId: String!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  startsAt: DateTime!
  supervisorId: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentCreateManySupervisorInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customerId: String!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  startsAt: DateTime!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentCreateManySupervisorInputEnvelope {
  data: [AppointmentCreateManySupervisorInput!]!
  skipDuplicates: Boolean
}

input AppointmentCreateNestedManyWithoutCustomerInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutCustomerInput!]
  create: [AppointmentCreateWithoutCustomerInput!]
  createMany: AppointmentCreateManyCustomerInputEnvelope
}

input AppointmentCreateNestedManyWithoutProceduresIdsInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutProceduresIdsInput!]
  create: [AppointmentCreateWithoutProceduresIdsInput!]
}

input AppointmentCreateNestedManyWithoutSupervisorInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutSupervisorInput!]
  create: [AppointmentCreateWithoutSupervisorInput!]
  createMany: AppointmentCreateManySupervisorInputEnvelope
}

input AppointmentCreateOrConnectWithoutCustomerInput {
  create: AppointmentCreateWithoutCustomerInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentCreateOrConnectWithoutProceduresIdsInput {
  create: AppointmentCreateWithoutProceduresIdsInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentCreateOrConnectWithoutSupervisorInput {
  create: AppointmentCreateWithoutSupervisorInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentCreateWithoutCustomerInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  proceduresIds: ProcedureCreateNestedManyWithoutAppointmentsInput
  startsAt: DateTime!
  supervisor: UserCreateNestedOneWithoutSupervisedAppointmentsInput!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentCreateWithoutProceduresIdsInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customer: UserCreateNestedOneWithoutAppointmentsInput!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  startsAt: DateTime!
  supervisor: UserCreateNestedOneWithoutSupervisedAppointmentsInput!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentCreateWithoutSupervisorInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customer: UserCreateNestedOneWithoutAppointmentsInput!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String
  proceduresIds: ProcedureCreateNestedManyWithoutAppointmentsInput
  startsAt: DateTime!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type AppointmentGroupBy {
  _count: AppointmentCountAggregate
  _max: AppointmentMaxAggregate
  _min: AppointmentMinAggregate
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customerId: String!
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime!
  id: String!
  startsAt: DateTime!
  supervisorId: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentListRelationFilter {
  every: AppointmentWhereInput
  none: AppointmentWhereInput
  some: AppointmentWhereInput
}

type AppointmentMaxAggregate {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customerId: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime
  id: String
  startsAt: DateTime
  supervisorId: String
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentMaxOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  customerId: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  endsAt: SortOrder
  id: SortOrder
  startsAt: SortOrder
  supervisorId: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

type AppointmentMinAggregate {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  customerId: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  endsAt: DateTime
  id: String
  startsAt: DateTime
  supervisorId: String
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input AppointmentMinOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  customerId: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  endsAt: SortOrder
  id: SortOrder
  startsAt: SortOrder
  supervisorId: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input AppointmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input AppointmentOrderByWithAggregationInput {
  _count: AppointmentCountOrderByAggregateInput
  _max: AppointmentMaxOrderByAggregateInput
  _min: AppointmentMinOrderByAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  customerId: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  endsAt: SortOrder
  id: SortOrder
  startsAt: SortOrder
  supervisorId: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input AppointmentOrderByWithRelationInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  customer: UserOrderByWithRelationInput
  customerId: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  endsAt: SortOrder
  id: SortOrder
  proceduresIds: ProcedureOrderByRelationAggregateInput
  startsAt: SortOrder
  supervisor: UserOrderByWithRelationInput
  supervisorId: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

enum AppointmentScalarFieldEnum {
  createdAt
  createdBy
  createdByName
  customerId
  deletedAt
  deletedBy
  deletedByName
  endsAt
  id
  startsAt
  supervisorId
  updatedAt
  updatedBy
  updatedByName
}

input AppointmentScalarWhereInput {
  AND: [AppointmentScalarWhereInput!]
  NOT: [AppointmentScalarWhereInput!]
  OR: [AppointmentScalarWhereInput!]
  createdAt: DateTimeNullableFilter
  createdBy: StringNullableFilter
  createdByName: StringNullableFilter
  customerId: StringFilter
  deletedAt: DateTimeNullableFilter
  deletedBy: StringNullableFilter
  deletedByName: StringNullableFilter
  endsAt: DateTimeFilter
  id: StringFilter
  startsAt: DateTimeFilter
  supervisorId: StringFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: StringNullableFilter
  updatedByName: StringNullableFilter
}

input AppointmentScalarWhereWithAggregatesInput {
  AND: [AppointmentScalarWhereWithAggregatesInput!]
  NOT: [AppointmentScalarWhereWithAggregatesInput!]
  OR: [AppointmentScalarWhereWithAggregatesInput!]
  createdAt: DateTimeNullableWithAggregatesFilter
  createdBy: StringNullableWithAggregatesFilter
  createdByName: StringNullableWithAggregatesFilter
  customerId: StringWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  deletedBy: StringNullableWithAggregatesFilter
  deletedByName: StringNullableWithAggregatesFilter
  endsAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  startsAt: DateTimeWithAggregatesFilter
  supervisorId: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  updatedBy: StringNullableWithAggregatesFilter
  updatedByName: StringNullableWithAggregatesFilter
}

input AppointmentUpdateInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  customer: UserUpdateOneRequiredWithoutAppointmentsNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  endsAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  proceduresIds: ProcedureUpdateManyWithoutAppointmentsNestedInput
  startsAt: DateTimeFieldUpdateOperationsInput
  supervisor: UserUpdateOneRequiredWithoutSupervisedAppointmentsNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input AppointmentUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  endsAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startsAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input AppointmentUpdateManyWithWhereWithoutCustomerInput {
  data: AppointmentUpdateManyMutationInput!
  where: AppointmentScalarWhereInput!
}

input AppointmentUpdateManyWithWhereWithoutProceduresIdsInput {
  data: AppointmentUpdateManyMutationInput!
  where: AppointmentScalarWhereInput!
}

input AppointmentUpdateManyWithWhereWithoutSupervisorInput {
  data: AppointmentUpdateManyMutationInput!
  where: AppointmentScalarWhereInput!
}

input AppointmentUpdateManyWithoutCustomerNestedInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutCustomerInput!]
  create: [AppointmentCreateWithoutCustomerInput!]
  createMany: AppointmentCreateManyCustomerInputEnvelope
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [AppointmentUpdateManyWithWhereWithoutCustomerInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutCustomerInput!]
}

input AppointmentUpdateManyWithoutProceduresIdsNestedInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutProceduresIdsInput!]
  create: [AppointmentCreateWithoutProceduresIdsInput!]
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutProceduresIdsInput!]
  updateMany: [AppointmentUpdateManyWithWhereWithoutProceduresIdsInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutProceduresIdsInput!]
}

input AppointmentUpdateManyWithoutSupervisorNestedInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutSupervisorInput!]
  create: [AppointmentCreateWithoutSupervisorInput!]
  createMany: AppointmentCreateManySupervisorInputEnvelope
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutSupervisorInput!]
  updateMany: [AppointmentUpdateManyWithWhereWithoutSupervisorInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutSupervisorInput!]
}

input AppointmentUpdateWithWhereUniqueWithoutCustomerInput {
  data: AppointmentUpdateWithoutCustomerInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithWhereUniqueWithoutProceduresIdsInput {
  data: AppointmentUpdateWithoutProceduresIdsInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithWhereUniqueWithoutSupervisorInput {
  data: AppointmentUpdateWithoutSupervisorInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithoutCustomerInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  endsAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  proceduresIds: ProcedureUpdateManyWithoutAppointmentsNestedInput
  startsAt: DateTimeFieldUpdateOperationsInput
  supervisor: UserUpdateOneRequiredWithoutSupervisedAppointmentsNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input AppointmentUpdateWithoutProceduresIdsInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  customer: UserUpdateOneRequiredWithoutAppointmentsNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  endsAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  startsAt: DateTimeFieldUpdateOperationsInput
  supervisor: UserUpdateOneRequiredWithoutSupervisedAppointmentsNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input AppointmentUpdateWithoutSupervisorInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  customer: UserUpdateOneRequiredWithoutAppointmentsNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  endsAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  proceduresIds: ProcedureUpdateManyWithoutAppointmentsNestedInput
  startsAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input AppointmentUpsertWithWhereUniqueWithoutCustomerInput {
  create: AppointmentCreateWithoutCustomerInput!
  update: AppointmentUpdateWithoutCustomerInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpsertWithWhereUniqueWithoutProceduresIdsInput {
  create: AppointmentCreateWithoutProceduresIdsInput!
  update: AppointmentUpdateWithoutProceduresIdsInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpsertWithWhereUniqueWithoutSupervisorInput {
  create: AppointmentCreateWithoutSupervisorInput!
  update: AppointmentUpdateWithoutSupervisorInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentWhereInput {
  AND: [AppointmentWhereInput!]
  NOT: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  createdAt: DateTimeNullableFilter
  createdBy: StringNullableFilter
  createdByName: StringNullableFilter
  customer: UserRelationFilter
  customerId: StringFilter
  deletedAt: DateTimeNullableFilter
  deletedBy: StringNullableFilter
  deletedByName: StringNullableFilter
  endsAt: DateTimeFilter
  id: StringFilter
  proceduresIds: ProcedureListRelationFilter
  startsAt: DateTimeFilter
  supervisor: UserRelationFilter
  supervisorId: StringFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: StringNullableFilter
  updatedByName: StringNullableFilter
}

input AppointmentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

type Mutation {
  createManyAppointment(data: [AppointmentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProcedure(data: [ProcedureCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAppointment(data: AppointmentCreateInput!): Appointment!
  createOneProcedure(data: ProcedureCreateInput!): Procedure!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAppointment(where: AppointmentWhereInput): AffectedRowsOutput!
  deleteManyProcedure(where: ProcedureWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteOneProcedure(where: ProcedureWhereUniqueInput!): Procedure
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyAppointment(data: AppointmentUpdateManyMutationInput!, where: AppointmentWhereInput): AffectedRowsOutput!
  updateManyProcedure(data: ProcedureUpdateManyMutationInput!, where: ProcedureWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateOneProcedure(data: ProcedureUpdateInput!, where: ProcedureWhereUniqueInput!): Procedure
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneAppointment(create: AppointmentCreateInput!, update: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment!
  upsertOneProcedure(create: ProcedureCreateInput!, update: ProcedureUpdateInput!, where: ProcedureWhereUniqueInput!): Procedure!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Procedure {
  _count: ProcedureCount
  appointments(cursor: AppointmentWhereUniqueInput, distinct: [AppointmentScalarFieldEnum!], orderBy: [AppointmentOrderByWithRelationInput!], skip: Int, take: Int, where: AppointmentWhereInput): [Appointment!]!
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String!
  idProc: String!
  name: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type ProcedureCount {
  appointments: Int!
}

type ProcedureCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  createdByName: Int!
  deletedAt: Int!
  deletedBy: Int!
  deletedByName: Int!
  id: Int!
  idProc: Int!
  name: Int!
  updatedAt: Int!
  updatedBy: Int!
  updatedByName: Int!
}

input ProcedureCountOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  id: SortOrder
  idProc: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input ProcedureCreateInput {
  appointments: AppointmentCreateNestedManyWithoutProceduresIdsInput
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String
  idProc: String!
  name: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input ProcedureCreateManyInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String
  idProc: String!
  name: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input ProcedureCreateNestedManyWithoutAppointmentsInput {
  connect: [ProcedureWhereUniqueInput!]
  connectOrCreate: [ProcedureCreateOrConnectWithoutAppointmentsInput!]
  create: [ProcedureCreateWithoutAppointmentsInput!]
}

input ProcedureCreateOrConnectWithoutAppointmentsInput {
  create: ProcedureCreateWithoutAppointmentsInput!
  where: ProcedureWhereUniqueInput!
}

input ProcedureCreateWithoutAppointmentsInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String
  idProc: String!
  name: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type ProcedureGroupBy {
  _count: ProcedureCountAggregate
  _max: ProcedureMaxAggregate
  _min: ProcedureMinAggregate
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String!
  idProc: String!
  name: String!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input ProcedureListRelationFilter {
  every: ProcedureWhereInput
  none: ProcedureWhereInput
  some: ProcedureWhereInput
}

type ProcedureMaxAggregate {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String
  idProc: String
  name: String
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input ProcedureMaxOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  id: SortOrder
  idProc: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

type ProcedureMinAggregate {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  id: String
  idProc: String
  name: String
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input ProcedureMinOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  id: SortOrder
  idProc: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input ProcedureOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProcedureOrderByWithAggregationInput {
  _count: ProcedureCountOrderByAggregateInput
  _max: ProcedureMaxOrderByAggregateInput
  _min: ProcedureMinOrderByAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  id: SortOrder
  idProc: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input ProcedureOrderByWithRelationInput {
  appointments: AppointmentOrderByRelationAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  id: SortOrder
  idProc: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

enum ProcedureScalarFieldEnum {
  createdAt
  createdBy
  createdByName
  deletedAt
  deletedBy
  deletedByName
  id
  idProc
  name
  updatedAt
  updatedBy
  updatedByName
}

input ProcedureScalarWhereInput {
  AND: [ProcedureScalarWhereInput!]
  NOT: [ProcedureScalarWhereInput!]
  OR: [ProcedureScalarWhereInput!]
  createdAt: DateTimeNullableFilter
  createdBy: StringNullableFilter
  createdByName: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  deletedBy: StringNullableFilter
  deletedByName: StringNullableFilter
  id: StringFilter
  idProc: StringFilter
  name: StringFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: StringNullableFilter
  updatedByName: StringNullableFilter
}

input ProcedureScalarWhereWithAggregatesInput {
  AND: [ProcedureScalarWhereWithAggregatesInput!]
  NOT: [ProcedureScalarWhereWithAggregatesInput!]
  OR: [ProcedureScalarWhereWithAggregatesInput!]
  createdAt: DateTimeNullableWithAggregatesFilter
  createdBy: StringNullableWithAggregatesFilter
  createdByName: StringNullableWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  deletedBy: StringNullableWithAggregatesFilter
  deletedByName: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  idProc: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  updatedBy: StringNullableWithAggregatesFilter
  updatedByName: StringNullableWithAggregatesFilter
}

input ProcedureUpdateInput {
  appointments: AppointmentUpdateManyWithoutProceduresIdsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  idProc: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input ProcedureUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  idProc: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input ProcedureUpdateManyWithWhereWithoutAppointmentsInput {
  data: ProcedureUpdateManyMutationInput!
  where: ProcedureScalarWhereInput!
}

input ProcedureUpdateManyWithoutAppointmentsNestedInput {
  connect: [ProcedureWhereUniqueInput!]
  connectOrCreate: [ProcedureCreateOrConnectWithoutAppointmentsInput!]
  create: [ProcedureCreateWithoutAppointmentsInput!]
  delete: [ProcedureWhereUniqueInput!]
  deleteMany: [ProcedureScalarWhereInput!]
  disconnect: [ProcedureWhereUniqueInput!]
  set: [ProcedureWhereUniqueInput!]
  update: [ProcedureUpdateWithWhereUniqueWithoutAppointmentsInput!]
  updateMany: [ProcedureUpdateManyWithWhereWithoutAppointmentsInput!]
  upsert: [ProcedureUpsertWithWhereUniqueWithoutAppointmentsInput!]
}

input ProcedureUpdateWithWhereUniqueWithoutAppointmentsInput {
  data: ProcedureUpdateWithoutAppointmentsInput!
  where: ProcedureWhereUniqueInput!
}

input ProcedureUpdateWithoutAppointmentsInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  idProc: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input ProcedureUpsertWithWhereUniqueWithoutAppointmentsInput {
  create: ProcedureCreateWithoutAppointmentsInput!
  update: ProcedureUpdateWithoutAppointmentsInput!
  where: ProcedureWhereUniqueInput!
}

input ProcedureWhereInput {
  AND: [ProcedureWhereInput!]
  NOT: [ProcedureWhereInput!]
  OR: [ProcedureWhereInput!]
  appointments: AppointmentListRelationFilter
  createdAt: DateTimeNullableFilter
  createdBy: StringNullableFilter
  createdByName: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  deletedBy: StringNullableFilter
  deletedByName: StringNullableFilter
  id: StringFilter
  idProc: StringFilter
  name: StringFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: StringNullableFilter
  updatedByName: StringNullableFilter
}

input ProcedureWhereUniqueInput {
  id: String
}

type Query {
  aggregateAppointment(cursor: AppointmentWhereUniqueInput, orderBy: [AppointmentOrderByWithRelationInput!], skip: Int, take: Int, where: AppointmentWhereInput): AggregateAppointment!
  aggregateProcedure(cursor: ProcedureWhereUniqueInput, orderBy: [ProcedureOrderByWithRelationInput!], skip: Int, take: Int, where: ProcedureWhereInput): AggregateProcedure!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointments(cursor: AppointmentWhereUniqueInput, distinct: [AppointmentScalarFieldEnum!], orderBy: [AppointmentOrderByWithRelationInput!], skip: Int, take: Int, where: AppointmentWhereInput): [Appointment!]!
  findFirstAppointment(cursor: AppointmentWhereUniqueInput, distinct: [AppointmentScalarFieldEnum!], orderBy: [AppointmentOrderByWithRelationInput!], skip: Int, take: Int, where: AppointmentWhereInput): Appointment
  findFirstProcedure(cursor: ProcedureWhereUniqueInput, distinct: [ProcedureScalarFieldEnum!], orderBy: [ProcedureOrderByWithRelationInput!], skip: Int, take: Int, where: ProcedureWhereInput): Procedure
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByAppointment(by: [AppointmentScalarFieldEnum!]!, having: AppointmentScalarWhereWithAggregatesInput, orderBy: [AppointmentOrderByWithAggregationInput!], skip: Int, take: Int, where: AppointmentWhereInput): [AppointmentGroupBy!]!
  groupByProcedure(by: [ProcedureScalarFieldEnum!]!, having: ProcedureScalarWhereWithAggregatesInput, orderBy: [ProcedureOrderByWithAggregationInput!], skip: Int, take: Int, where: ProcedureWhereInput): [ProcedureGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  procedure(where: ProcedureWhereUniqueInput!): Procedure
  procedures(cursor: ProcedureWhereUniqueInput, distinct: [ProcedureScalarFieldEnum!], orderBy: [ProcedureOrderByWithRelationInput!], skip: Int, take: Int, where: ProcedureWhereInput): [Procedure!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  CUSTOMER
  SUPERVISOR
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  observeNewUser: UpdatedUser!
  observeUser(id: String!): UpdatedUser!
}

type UpdatedUser {
  message: String
  user: User
}

type User {
  _count: UserCount
  appointments(cursor: AppointmentWhereUniqueInput, distinct: [AppointmentScalarFieldEnum!], orderBy: [AppointmentOrderByWithRelationInput!], skip: Int, take: Int, where: AppointmentWhereInput): [Appointment!]!
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String!
  id: String!
  name: String
  role: Role!
  supervisedAppointments(cursor: AppointmentWhereUniqueInput, distinct: [AppointmentScalarFieldEnum!], orderBy: [AppointmentOrderByWithRelationInput!], skip: Int, take: Int, where: AppointmentWhereInput): [Appointment!]!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type UserCount {
  appointments: Int!
  supervisedAppointments: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  createdByName: Int!
  deletedAt: Int!
  deletedBy: Int!
  deletedByName: Int!
  email: Int!
  id: Int!
  name: Int!
  role: Int!
  updatedAt: Int!
  updatedBy: Int!
  updatedByName: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input UserCreateInput {
  appointments: AppointmentCreateNestedManyWithoutCustomerInput
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String!
  id: String
  name: String
  role: Role
  supervisedAppointments: AppointmentCreateNestedManyWithoutSupervisorInput
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input UserCreateManyInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String!
  id: String
  name: String
  role: Role
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input UserCreateNestedOneWithoutAppointmentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAppointmentsInput
  create: UserCreateWithoutAppointmentsInput
}

input UserCreateNestedOneWithoutSupervisedAppointmentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSupervisedAppointmentsInput
  create: UserCreateWithoutSupervisedAppointmentsInput
}

input UserCreateOrConnectWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSupervisedAppointmentsInput {
  create: UserCreateWithoutSupervisedAppointmentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAppointmentsInput {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String!
  id: String
  name: String
  role: Role
  supervisedAppointments: AppointmentCreateNestedManyWithoutSupervisorInput
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input UserCreateWithoutSupervisedAppointmentsInput {
  appointments: AppointmentCreateNestedManyWithoutCustomerInput
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String!
  id: String
  name: String
  role: Role
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String!
  id: String!
  name: String
  role: Role!
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

type UserMaxAggregate {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String
  id: String
  name: String
  role: Role
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  createdBy: String
  createdByName: String
  deletedAt: DateTime
  deletedBy: String
  deletedByName: String
  email: String
  id: String
  name: String
  role: Role
  updatedAt: DateTime
  updatedBy: String
  updatedByName: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input UserOrderByWithRelationInput {
  appointments: AppointmentOrderByRelationAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  createdByName: SortOrder
  deletedAt: SortOrder
  deletedBy: SortOrder
  deletedByName: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  supervisedAppointments: AppointmentOrderByRelationAggregateInput
  updatedAt: SortOrder
  updatedBy: SortOrder
  updatedByName: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  createdBy
  createdByName
  deletedAt
  deletedBy
  deletedByName
  email
  id
  name
  role
  updatedAt
  updatedBy
  updatedByName
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeNullableWithAggregatesFilter
  createdBy: StringNullableWithAggregatesFilter
  createdByName: StringNullableWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  deletedBy: StringNullableWithAggregatesFilter
  deletedByName: StringNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  updatedBy: StringNullableWithAggregatesFilter
  updatedByName: StringNullableWithAggregatesFilter
}

input UserUpdateInput {
  appointments: AppointmentUpdateManyWithoutCustomerNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  supervisedAppointments: AppointmentUpdateManyWithoutSupervisorNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAppointmentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAppointmentsInput
  create: UserCreateWithoutAppointmentsInput
  update: UserUpdateWithoutAppointmentsInput
  upsert: UserUpsertWithoutAppointmentsInput
}

input UserUpdateOneRequiredWithoutSupervisedAppointmentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSupervisedAppointmentsInput
  create: UserCreateWithoutSupervisedAppointmentsInput
  update: UserUpdateWithoutSupervisedAppointmentsInput
  upsert: UserUpsertWithoutSupervisedAppointmentsInput
}

input UserUpdateWithoutAppointmentsInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  supervisedAppointments: AppointmentUpdateManyWithoutSupervisorNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutSupervisedAppointmentsInput {
  appointments: AppointmentUpdateManyWithoutCustomerNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  createdBy: NullableStringFieldUpdateOperationsInput
  createdByName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedBy: NullableStringFieldUpdateOperationsInput
  deletedByName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: NullableStringFieldUpdateOperationsInput
  updatedByName: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput!
  update: UserUpdateWithoutAppointmentsInput!
}

input UserUpsertWithoutSupervisedAppointmentsInput {
  create: UserCreateWithoutSupervisedAppointmentsInput!
  update: UserUpdateWithoutSupervisedAppointmentsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  appointments: AppointmentListRelationFilter
  createdAt: DateTimeNullableFilter
  createdBy: StringNullableFilter
  createdByName: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  deletedBy: StringNullableFilter
  deletedByName: StringNullableFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  role: EnumRoleFilter
  supervisedAppointments: AppointmentListRelationFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: StringNullableFilter
  updatedByName: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
